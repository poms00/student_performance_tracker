from pathlib import Path

def letter_grade(score):
    if score >= 85: return "A"
    if score >= 75: return "B"
    if score >= 65: return "C"
    if score >= 50: return "D"
    return "E"

def build_markdown_report(records):
    """Membangun konten markdown dari records list of dict:
    each record must contain keys: student_id, name, attendance_rate, final_score
    """
    lines = [
        "# Rekap Nilai Mahasiswa",
        "",
        "| NIM | Nama | Hadir (%) | Nilai Akhir | Predikat |",
        "|---|---|---:|---:|:---:|",
    ]
    for r in records:
        pred = letter_grade(r.get("final_score", 0))
        lines.append(
            "| {sid} | {name} | {att:.2f} | {score:.2f} | {pred} |".format(
                sid=r.get("student_id", ""),
                name=r.get("name", ""),
                att=r.get("attendance_rate", 0.0),
                score=r.get("final_score", 0.0),
                pred=pred,
            )
        )
    lines.append("")
    lines.append("Generated by student_performance_tracker")
    return "\n".join(lines)

def save_text(path, content):
    Path(path).write_text(content, encoding="utf-8")


def build_html_report(records):
    """Bangun HTML table dengan pewarnaan berdasarkan predikat.
    records: list of dict dengan kunci student_id, name, attendance_rate, final_score
    """
    def grade(score):
        if score >= 85: return "A"
        if score >= 75: return "B"
        if score >= 65: return "C"
        if score >= 50: return "D"
        return "E"

    def color_for(letter):
        # warna latar ringan agar teks tetap terbaca
        return {
            "A": "#e6ffe6",   # hijau muda
            "B": "#e6f0ff",   # biru muda
            "C": "#fff4e6",   # oranye muda
            "D": "#ffe6e6",   # merah muda
            "E": "#ffd6d6",   # merah lebih pekat
        }.get(letter, "#ffffff")

    rows_html = []
    for r in records:
        score = float(r.get("final_score", 0.0))
        letter = grade(score)
        bg = color_for(letter)
        rows_html.append(
            """
            <tr style="background:{bg}">
              <td>{sid}</td>
              <td>{name}</td>
              <td style="text-align:right">{att:.2f}</td>
              <td style="text-align:right">{score:.2f}</td>
              <td style="text-align:center">{letter}</td>
            </tr>
            """.format(
                bg=bg,
                sid=r.get("student_id", ""),
                name=r.get("name", ""),
                att=float(r.get("attendance_rate", 0.0)),
                score=score,
                letter=letter,
            )
        )

    html = """
    <!doctype html>
    <html lang="id">
      <head>
        <meta charset=\"utf-8\" />
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />
        <title>Rekap Nilai Mahasiswa</title>
        <style>
          body{ font-family: Arial, Helvetica, sans-serif; padding:24px; }
          table{ border-collapse: collapse; width:100%; }
          th, td{ border:1px solid #ccc; padding:8px 10px; }
          th{ background:#f7f7f7; text-align:left; }
          caption{ text-align:left; font-weight:bold; margin-bottom:8px; }
        </style>
      </head>
      <body>
        <h1>Rekap Nilai Mahasiswa</h1>
        <table>
          <thead>
            <tr>
              <th>NIM</th>
              <th>Nama</th>
              <th style=\"text-align:right\">Hadir (%)</th>
              <th style=\"text-align:right\">Nilai Akhir</th>
              <th style=\"text-align:center\">Predikat</th>
            </tr>
          </thead>
          <tbody>
            %%ROWS%%
          </tbody>
        </table>
        <p style=\"margin-top:12px;color:#666\">Generated by student_performance_tracker</p>
      </body>
    </html>
    """

    return html.replace("%%ROWS%%", "\n".join(rows_html))